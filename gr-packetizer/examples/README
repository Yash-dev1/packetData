# Packetizer module examples
See report for more detailed information

## Basic test examples (testing individual features)

### test_mapping:

tests mapping and constellation decoder for hard and soft decoding. Also demonstrates differential encoding/decoding.

### test_soft decoder:
tests soft constellation decoding

### test_fec:
tests FEC with soft and hard decoding

### test_tagged_stream_fix
tests the Tagged Stream Fixer block, which removes "unnecessary" padding samples in tagged streams, to make them compatible with tagged_stream blocks in GNU Radio

Tagged Stream Fix description: Fixes a stream where the packet length does not correspond to the number of samples.  For example, if we have a stream with a packet length tag with value 50, and between each tag there are 52 samples,
the block will remove the last 2 samples from the output stream to make a stream with packet length tag of 50 and 50 samples between each tag.


### test_time_phase_sync
The symbols are shaped with a root raised cosine filter. A channel model is added to simulate
a time offset, frequency offset, phase offset and noise in the signal. Time and phase
synchronization is added with the Polyphase Clock Sync block and Costas Loop. A BER
output is also provided to analyze the effects.

### test_whitener
illustrates the use of the Tagged Stream Whitener blocks

## Packet encoder/decoder test examples

### encdec_basic
Implementes a basic packet encoder/decoder using separate GNU Radio blocks (for debugging)

### encdec_basic_differential
Same as above but now with differential encoding/decoding

### encdec_custom
Implements Extended Packet Encoder/Extended Packet Decoder blocks

### encdec_custom_fec
Same as above but in combination with FEC encoding/decoding blocks



## Communication chain examples
### chain_cusomt
Communication chain using the Extended Packet Encoder/Decoder blocks

### chain_rx_debug 
Same as above but the packet decoder is made of individual blocks (for debugging purposes)

### chain_rx_debug_differential
Same as above but for differential decoding


